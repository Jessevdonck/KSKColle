generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TournamentType {
  SWISS
  ROUND_ROBIN
}

enum RoundType {
  REGULAR
  MAKEUP
}

model User {
  user_id            Int             @id @default(autoincrement())
  voornaam           String
  achternaam         String
  email              String?          @unique(map: "idx_user_email_unique") @db.VarChar(255)
  guardian_email     String?          @db.VarChar(255)
  tel_nummer         String?
  vast_nummer        String?
  guardian_phone     String?          @db.VarChar(255) 
  geboortedatum      DateTime?
  schaakrating_elo   Int             @default(0)              
  schaakrating_difference Int?
  schaakrating_max   Int?
  is_admin           Boolean?
  is_youth           Boolean          @default(false)
  fide_id            Int?            @unique
  lid_sinds          DateTime
  password_hash      String          @db.VarChar(255)
  roles              Json
  adres_straat       String?
  adres_nummer      String?
  adres_bus         String?
  adres_postcode    String?
  adres_gemeente    String?
  adres_land        String?           @default("Belgium")
  avatar_url        String?           @db.VarChar(500)
  
  // Lidgeld status
  lidgeld_betaald   Boolean          @default(false)
  lidgeld_periode_start DateTime?
  lidgeld_periode_eind DateTime?
  bondslidgeld_betaald Boolean       @default(false)
  bondslidgeld_periode_start DateTime?
  bondslidgeld_periode_eind DateTime?
  jeugdlidgeld_betaald Boolean       @default(false)
  jeugdlidgeld_periode_start DateTime?
  jeugdlidgeld_periode_eind DateTime?

  participations     Participation[]    
  speler1Games       Game[]          @relation("Speler1")
  speler2Games       Game[]          @relation("Speler2")
  gewonnenGames      Game[]          @relation("Winnaar")
  passwordResetTokens PasswordResetToken[]
  articles           Article[]

  @@index([is_youth])
}

model Tournament {
  tournament_id      Int            @id @default(autoincrement())
  naam               String
  rondes             Int
  type               TournamentType  @default(SWISS)
  rating_enabled     Boolean         @default(true)   
  finished           Boolean         @default(false) 
  is_youth           Boolean         @default(false)
  class_name         String?        // Voor toernooien met meerdere klasses (bv. "Eerste Klasse", "Tweede Klasse")
  
  participations     Participation[]  
  rounds             Round[]          
  makeupDays         MakeupDay[]    
  calendarEvents     CalendarEvent[] // Calendar events gerelateerd aan dit toernooi

  @@index([is_youth])  
}

model Round {
  round_id           Int              @id @default(autoincrement())
  tournament_id      Int
  ronde_nummer       Int            
  ronde_datum        DateTime
  startuur           String           @default("20:00")
  calendar_event_id  Int?
  type               RoundType        @default(REGULAR)
  label              String?          // Voor inhaaldagen: "Inhaaldag na ronde 3"
  is_sevilla_imported Boolean         @default(false) // True voor Sevilla geïmporteerde rondes
  
  tournament         Tournament @relation(fields: [tournament_id], references: [tournament_id], onDelete: Cascade) 
  calendarEvent      CalendarEvent?   @relation(fields: [calendar_event_id], references: [event_id], onDelete: SetNull)
  games              Game[]            @relation("RoundGames") 

   @@unique([ronde_nummer, tournament_id]) 
}

model Game {
  game_id            Int            @id @default(autoincrement())
  round_id           Int
  speler1_id        Int               
  speler2_id        Int?               
  winnaar_id        Int?               
  result             String?
  uitgestelde_datum   DateTime?
  board_position     Int?            // Original board position for Sevilla tournaments
  original_game_id   Int?            // Reference to original game when postponed

  round              Round             @relation("RoundGames", fields: [round_id], references: [round_id], onDelete: Cascade) 
  speler1           User              @relation("Speler1", fields: [speler1_id], references: [user_id])
  speler2           User?              @relation("Speler2", fields: [speler2_id], references: [user_id])
  winnaar           User?             @relation("Winnaar", fields: [winnaar_id], references: [user_id]) 
}

model Participation {
  user_id            Int
  tournament_id      Int
  score              Float?           @default(0)
  buchholz           Float?           @default(0)
  sonnebornBerger    Float?          @default(0)
  opponents          String?          @default("[]") 
  color_history      String?          @default("[]") 
  bye_round          Int?

  tie_break          Float?           @default(0)

  wins               Int?             @default(0)
  
  // Sevilla rating data
  sevilla_initial_rating Int?         // IRtg from Sevilla
  sevilla_final_rating   Int?         // Rating from Sevilla
  sevilla_rating_change  Int?         // Rtg_W_We from Sevilla
  
  user               User              @relation(fields: [user_id], references: [user_id])
  tournament         Tournament        @relation(fields: [tournament_id], references: [tournament_id], onDelete: Cascade)

  @@id([user_id, tournament_id]) 
}

model CalendarEvent {
  event_id       Int      @id @default(autoincrement())
  title          String
  date           DateTime
  startuur       String   @default("20:00")
  type           String   @default("Activiteit")
  description    String?
  tournament_id  Int?     // Optioneel, voor events die niet aan een toernooi gekoppeld zijn
  is_youth       Boolean  @default(false) // Voor jeugd activiteiten
  category       String?  // Voor jeugd categorieën: "Stap 1", "Stap 2", "Stap 3+4"
  instructors    String?  // JSON array van lesgever namen voor jeugd activiteiten
  begeleider     String?  // JSON array van begeleider namen voor niet-jeugd activiteiten
  
  // Relaties
  tournament     Tournament? @relation(fields: [tournament_id], references: [tournament_id], onDelete: Cascade)
  rounds         Round[]
  makeupDays     MakeupDay[]
  
  @@index([is_youth])
}

model MakeupDay {
  id                 Int       @id @default(autoincrement())
  tournament_id      Int
  round_after        Int       // na welke officiële ronde deze dag komt
  date               DateTime
  startuur           String    @default("20:00")
  label              String?   // bv. "Inhaaldag 1"
  calendar_event_id  Int?
  
  tournament         Tournament @relation(fields: [tournament_id], references: [tournament_id], onDelete: Cascade)
  calendarEvent      CalendarEvent?   @relation(fields: [calendar_event_id], references: [event_id], onDelete: SetNull)
  
  @@index([tournament_id])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  user_id   Int
  token     String   @unique @db.VarChar(255)
  expires   DateTime
  used      Boolean  @default(false)
  
  user      User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  @@index([user_id])
  @@index([token])
  @@index([expires])
}

enum ArticleType {
  NEWS
  TOURNAMENT_REPORT
  GENERAL
}

model Article {
  article_id    Int         @id @default(autoincrement())
  title         String      @db.Text
  content       String      @db.LongText
  excerpt       String?     @db.Text
  type          ArticleType @default(NEWS)
  author_id     Int
  published     Boolean     @default(false)
  featured      Boolean     @default(false)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  published_at  DateTime?
  
  author        User        @relation(fields: [author_id], references: [user_id], onDelete: Cascade)
  
  @@index([author_id])
  @@index([published])
  @@index([featured])
  @@index([created_at])
  @@index([published_at])
} 